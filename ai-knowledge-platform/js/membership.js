/* AIÁü•ËØÜÂπ≥Âè∞ - ‰ºöÂëò‰∏≠ÂøÉËÑöÊú¨ */

// ‰ºöÂëòÂ•óÈ§êÊï∞ÊçÆ
const MembershipPlans = [
    {
        id: 'basic',
        name: 'Âü∫Á°ÄÁâà',
        price: 0,
        period: 'Ê∞∏‰πÖÂÖçË¥π',
        description: 'ÈÄÇÂêàAIÂ≠¶‰π†ÂàùÂ≠¶ËÄÖ',
        features: [
            { text: 'ÊØèÊúà10ÁØáÂÖçË¥πÊñáÁ´†', included: true },
            { text: 'Âü∫Á°ÄÂ≠¶‰π†ËµÑÊ∫ê', included: true },
            { text: 'Á§æÂå∫ËÆ®ËÆ∫ÊùÉÈôê', included: true },
            { text: 'ÊâÄÊúâ‰ªòË¥πÊñáÁ´†', included: false },
            { text: 'Á¶ªÁ∫ø‰∏ãËΩΩ', included: false },
            { text: '‰∏ìÂÆ∂Á≠îÁñë', included: false },
            { text: '‰∏ìÂ±ûÂ≠¶‰π†Ë∑ØÂæÑ', included: false },
            { text: '‰ºòÂÖàÂÆ¢ÊúçÊîØÊåÅ', included: false }
        ],
        buttonText: 'ÂΩìÂâçÂ•óÈ§ê',
        buttonClass: 'current',
        popular: false
    },
    {
        id: 'premium-monthly',
        name: 'È´òÁ∫ßÁâà',
        price: 29,
        period: 'ÊØèÊúà',
        description: 'ÈÄÇÂêàÊåÅÁª≠Â≠¶‰π†ËÄÖ',
        features: [
            { text: 'Êó†ÈôêÊñáÁ´†ÈòÖËØª', included: true },
            { text: 'ÊâÄÊúâÂ≠¶‰π†ËµÑÊ∫ê', included: true },
            { text: 'Á¶ªÁ∫ø‰∏ãËΩΩ', included: true },
            { text: '‰∏ìÂÆ∂Á≠îÁñë', included: true },
            { text: '‰∏ìÂ±ûÂ≠¶‰π†Ë∑ØÂæÑ', included: true },
            { text: '‰ºòÂÖàÂÆ¢ÊúçÊîØÊåÅ', included: true },
            { text: 'Êó†ÂπøÂëä‰ΩìÈ™å', included: true },
            { text: 'Â≠¶‰π†Êä•ÂëäÂàÜÊûê', included: true }
        ],
        buttonText: 'Á´ãÂç≥ËÆ¢ÈòÖ',
        buttonClass: 'primary',
        popular: true
    },
    {
        id: 'premium-yearly',
        name: '‰∏ì‰∏öÁâà',
        price: 299,
        period: 'ÊØèÂπ¥',
        description: 'ÈÄÇÂêà‰∏ì‰∏öÁî®Êà∑ÂíåÂõ¢Èòü',
        originalPrice: 348,
        savings: 49,
        features: [
            { text: 'È´òÁ∫ßÁâàÊâÄÊúâÂäüËÉΩ', included: true },
            { text: '‰∏ìÂ±ûËØæÁ®ãËÆøÈóÆ', included: true },
            { text: '1ÂØπ1‰∏ìÂÆ∂ÊåáÂØº', included: true },
            { text: 'APIËÆøÈóÆÊùÉÈôê', included: true },
            { text: 'ÂïÜ‰∏ö‰ΩøÁî®ËÆ∏ÂèØ', included: true },
            { text: 'Âõ¢ÈòüÂçè‰ΩúÂäüËÉΩ', included: true },
            { text: 'ÂÆöÂà∂Â≠¶‰π†ÊñπÊ°à', included: true },
            { text: 'Á∫ø‰∏ãÊ¥ªÂä®‰ºòÂÖàÊùÉ', included: true }
        ],
        buttonText: 'Á´ãÂç≥ËÆ¢ÈòÖ',
        buttonClass: 'primary',
        popular: false
    }
];

// ‰ºöÂëòÊùÉÁõäÊï∞ÊçÆ
const MembershipBenefits = [
    {
        icon: 'üìö',
        title: 'Êó†ÈôêÈòÖËØª',
        description: 'ËÆøÈóÆÊâÄÊúâ‰ªòË¥πÊñáÁ´†ÂíåÊ∑±Â∫¶ÂÜÖÂÆπÔºå‰∏çÂèóÊï∞ÈáèÈôêÂà∂'
    },
    {
        icon: 'üí°',
        title: '‰∏ìÂÆ∂ÊåáÂØº',
        description: 'Ëé∑ÂæóAIÈ¢ÜÂüü‰∏ìÂÆ∂ÁöÑ‰∏™ÊÄßÂåñÊåáÂØºÂíåÁ≠îÁñëÊúçÂä°'
    },
    {
        icon: 'üéØ',
        title: 'Â≠¶‰π†Ë∑ØÂæÑ',
        description: 'ÂÆöÂà∂ÂåñÁöÑÂ≠¶‰π†Ë∑ØÂæÑÔºåÂ∏ÆÂä©ÊÇ®Á≥ªÁªüÊéåÊè°AIÊäÄËÉΩ'
    },
    {
        icon: 'üì±',
        title: 'Â§öÁ´ØÂêåÊ≠•',
        description: 'ÊâãÊú∫„ÄÅÂπ≥Êùø„ÄÅÁîµËÑëÊó†ÁºùÂêåÊ≠•ÔºåÈöèÊó∂ÈöèÂú∞Â≠¶‰π†'
    },
    {
        icon: 'üî•',
        title: 'ÊúÄÊñ∞ËµÑËÆØ',
        description: 'Á¨¨‰∏ÄÊó∂Èó¥Ëé∑ÂèñAIÈ¢ÜÂüüÊúÄÊñ∞Âä®ÊÄÅÂíåÊäÄÊúØË∂ãÂäø'
    },
    {
        icon: 'üèÜ',
        title: '‰∏ìÂ±ûÊùÉÁõä',
        description: '‰ºöÂëò‰∏ìÂ±ûÊ¥ªÂä®„ÄÅ‰ºòÊÉ†Âà∏ÂíåÂÆû‰ΩìÁ§ºÁâ©Á≠âÁâπÊùÉ'
    }
];

// Â∏∏ËßÅÈóÆÈ¢òÊï∞ÊçÆ
const MembershipFAQ = [
    {
        question: '‰ºöÂëòËÆ¢ÈòÖÂêéÂ¶Ç‰Ωï‰ªòÊ¨æÔºü',
        answer: 'Êàë‰ª¨ÊîØÊåÅÊîØ‰ªòÂÆù„ÄÅÂæÆ‰ø°ÊîØ‰ªò„ÄÅÈì∂Ë°åÂç°Á≠âÂ§öÁßçÊîØ‰ªòÊñπÂºè„ÄÇËÆ¢ÈòÖÂêéÁ≥ªÁªü‰ºöËá™Âä®Êâ£Ë¥πÔºåÊÇ®‰πüÂèØ‰ª•ÈöèÊó∂ÂèñÊ∂àËÆ¢ÈòÖ„ÄÇ'
    },
    {
        question: 'ÂèØ‰ª•ÈöèÊó∂ÂèñÊ∂àËÆ¢ÈòÖÂêóÔºü',
        answer: 'ÊòØÁöÑÔºåÊÇ®ÂèØ‰ª•ÈöèÊó∂ÂèñÊ∂àËÆ¢ÈòÖ„ÄÇÂèñÊ∂àÂêé‰ªçÂèØ‰ΩøÁî®Âà∞ÂΩìÂâçËÆ¢ÈòÖÊúüÁªìÊùüÔºå‰∏ç‰ºöÁ´ãÂç≥Â§±Êïà„ÄÇ'
    },
    {
        question: '‰ªòË¥πÊñáÁ´†ÂèØ‰ª•Á¶ªÁ∫ø‰∏ãËΩΩÂêóÔºü',
        answer: 'È´òÁ∫ßÁâàÂíå‰∏ì‰∏öÁâà‰ºöÂëòÈÉΩÊîØÊåÅÁ¶ªÁ∫ø‰∏ãËΩΩÂäüËÉΩÔºåÊÇ®ÂèØ‰ª•‰∏ãËΩΩÊñáÁ´†Âà∞Êú¨Âú∞ÈöèÊó∂ÈòÖËØª„ÄÇ'
    },
    {
        question: '‰ºöÂëò‰ª∑Ê†º‰ºöÂèòÂä®ÂêóÔºü',
        answer: 'ËÆ¢ÈòÖÂêé‰ª∑Ê†ºÂ∞Ü‰øùÊåÅ‰∏çÂèòÔºåÂç≥‰ΩøÂêéÁª≠Ê∂®‰ª∑‰πü‰∏ç‰ºöÂΩ±ÂìçÊÇ®ÁöÑËÆ¢ÈòÖ‰ª∑Ê†º„ÄÇÊàë‰ª¨‰øùËØÅ‰ª∑Ê†ºÁöÑÁ®≥ÂÆöÊÄß„ÄÇ'
    },
    {
        question: 'ÊîØÊåÅÈÄÄÊ¨æÂêóÔºü',
        answer: 'Êàë‰ª¨Êèê‰æõ7Â§©Êó†ÁêÜÁî±ÈÄÄÊ¨æ‰øùËØÅ„ÄÇÂ¶ÇÊûúÊÇ®ÂØπÊúçÂä°‰∏çÊª°ÊÑèÔºåÂèØ‰ª•Âú®Ë¥≠‰π∞Âêé7Â§©ÂÜÖÁî≥ËØ∑ÂÖ®È¢ùÈÄÄÊ¨æ„ÄÇ'
    },
    {
        question: 'ÂèØ‰ª•ÂàÜ‰∫´‰ºöÂëòË¥¶Âè∑ÂêóÔºü',
        answer: 'ÊØè‰∏™‰ºöÂëòË¥¶Âè∑‰ªÖ‰æõ‰∏™‰∫∫‰ΩøÁî®Ôºå‰∏çÂª∫ËÆÆ‰∏é‰ªñ‰∫∫ÂàÜ‰∫´„ÄÇ‰∏ì‰∏öÁâàÊîØÊåÅÂõ¢ÈòüÂçè‰ΩúÂäüËÉΩÔºåÈÄÇÂêà‰ºÅ‰∏öÁî®Êà∑„ÄÇ'
    }
];

// Áî®Êà∑ËØÑ‰ª∑Êï∞ÊçÆ
const MembershipTestimonials = [
    {
        name: 'Âº†ÂêåÂ≠¶',
        role: 'Êú∫Âô®Â≠¶‰π†Â∑•Á®ãÂ∏à',
        content: 'È´òÁ∫ß‰ºöÂëòÈùûÂ∏∏ÂÄºÂæóÔºÅ‰ªòË¥πÊñáÁ´†Ë¥®ÈáèÂæàÈ´òÔºå‰∏ìÂÆ∂ÊåáÂØº‰πüÂæà‰∏ì‰∏öÔºåÂ∏ÆÊàëÂø´ÈÄüÊèêÂçá‰∫ÜAIÊäÄËÉΩ„ÄÇ',
        avatar: 'üë®‚Äçüíº',
        rating: 5
    },
    {
        name: 'ÊùéÁ†îÁ©∂Âëò',
        role: 'AIÁ†îÁ©∂Âëò',
        content: '‰∏ì‰∏öÁâàÁöÑ1ÂØπ1ÊåáÂØºÊúçÂä°ÂæàÊ£íÔºå‰∏ìÂÆ∂ÂæàÊúâËÄêÂøÉÔºåÂ∏ÆÊàëËß£ÂÜ≥‰∫ÜÂæàÂ§öÁ†îÁ©∂‰∏≠ÁöÑÈöæÈ¢ò„ÄÇ',
        avatar: 'üë©‚Äçüî¨',
        rating: 5
    },
    {
        name: 'ÁéãÂºÄÂèëËÄÖ',
        role: 'ÂÖ®Ê†àÂºÄÂèëËÄÖ',
        content: 'Â≠¶‰π†Ë∑ØÂæÑËßÑÂàíÂæóÂæàÂ•ΩÔºå‰ªéÂü∫Á°ÄÂà∞ËøõÈò∂Âæ™Â∫èÊ∏êËøõÔºåÁé∞Âú®ÊàëÂ∑≤ÁªèËÉΩÁã¨Á´ãÂºÄÂèëAIÂ∫îÁî®‰∫Ü„ÄÇ',
        avatar: 'üë®‚Äçüíª',
        rating: 4
    },
    {
        name: 'Èôà‰∫ßÂìÅÁªèÁêÜ',
        role: 'AI‰∫ßÂìÅÁªèÁêÜ',
        content: 'ÊúÄÊñ∞ÁöÑAIËµÑËÆØÂæàÂèäÊó∂ÔºåÂ∏ÆÊàëÂø´ÈÄü‰∫ÜËß£Ë°å‰∏öÂä®ÊÄÅÔºåÂØπ‰∫ßÂìÅËÆæËÆ°ÂæàÊúâÂ∏ÆÂä©„ÄÇ',
        avatar: 'üë©‚Äçüíº',
        rating: 5
    },
    {
        name: 'ÂàòÂ≠¶Áîü',
        role: 'ËÆ°ÁÆóÊú∫‰∏ì‰∏öÂ≠¶Áîü',
        content: '‰Ωú‰∏∫Â≠¶ÁîüÔºå‰ª∑Ê†ºÂæàÂêàÁêÜÔºåÂÜÖÂÆπË¥®ÈáèÂæàÈ´òÔºåÊØîÂæàÂ§ö‰ªòË¥πËØæÁ®ãÈÉΩÂÆûÁî®„ÄÇ',
        avatar: 'üë®‚Äçüéì',
        rating: 4
    },
    {
        name: 'ËµµÂàõ‰∏öËÄÖ',
        role: 'AIÂàõ‰∏öËÄÖ',
        content: '‰∏ì‰∏öÁâàÁöÑÂïÜ‰∏ö‰ΩøÁî®ËÆ∏ÂèØÂØπÊàë‰ª¨ÂæàÈáçË¶ÅÔºåÂõ¢ÈòüÂçè‰ΩúÂäüËÉΩ‰πüÂæàÂÆûÁî®„ÄÇ',
        avatar: 'üöÄ',
        rating: 5
    }
];

// ‰ºöÂëò‰∏≠ÂøÉÊéßÂà∂Âô®
class MembershipCenter {
    constructor() {
        this.plans = MembershipPlans;
        this.benefits = MembershipBenefits;
        this.faq = MembershipFAQ;
        this.testimonials = MembershipTestimonials;
        this.selectedPlan = null;
        this.paymentModal = null;
        this.init();
    }

    init() {
        this.renderPlans();
        this.renderBenefits();
        this.renderFAQ();
        this.renderTestimonials();
        this.bindEvents();
        this.initPaymentModal();
        this.checkUserStatus();
        this.initCountdown();
    }

    bindEvents() {
        // Â•óÈ§êÈÄâÊã©ÊåâÈíÆ
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('plan-btn')) {
                const planId = e.target.closest('.plan-card').dataset.plan;
                this.selectPlan(planId);
            }
        });

        // ÊîØ‰ªòÊñπÂºèÈÄâÊã©
        document.addEventListener('click', (e) => {
            if (e.target.closest('.payment-method')) {
                this.selectPaymentMethod(e.target.closest('.payment-method'));
            }
        });

        // ÊîØ‰ªòÁ°ÆËÆ§ÊåâÈíÆ
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('confirm-payment-btn')) {
                this.confirmPayment();
            }
        });

        // ÊîØ‰ªòÊ®°ÊÄÅÊ°ÜÂÖ≥Èó≠
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('payment-modal-close') ||
                e.target.classList.contains('payment-modal')) {
                this.closePaymentModal();
            }
        });

        // FAQÂ±ïÂºÄ/Êî∂Ëµ∑
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('faq-question')) {
                this.toggleFAQ(e.target.closest('.faq-item'));
            }
        });
    }

    renderPlans() {
        const plansGrid = document.querySelector('.plans-grid');
        if (!plansGrid) return;

        plansGrid.innerHTML = this.plans.map((plan, index) => `
            <div class="plan-card ${plan.popular ? 'featured' : ''} fade-in-up delay-${index + 1}" data-plan="${plan.id}">
                <div class="plan-header">
                    <h3 class="plan-name">${plan.name}</h3>
                    <div class="plan-price">
                        ${plan.originalPrice ?
                            `<span style="text-decoration: line-through; color: var(--text-tertiary); font-size: var(--text-lg);">¬•${plan.originalPrice}</span>` :
                            ''
                        }
                        <span class="plan-currency">¬•</span>
                        <span class="plan-amount">${plan.price}</span>
                        <span class="plan-period">/${plan.period}</span>
                    </div>
                    ${plan.savings ?
                        `<div style="color: var(--success-color); font-size: var(--text-sm); font-weight: 600;">
                            ËäÇÁúÅ ¬•${plan.savings}
                        </div>` :
                        ''
                    }
                    <p class="plan-description">${plan.description}</p>
                </div>
                <div class="plan-features">
                    ${plan.features.map(feature => `
                        <div class="plan-feature ${feature.included ? '' : 'disabled'}">
                            <div class="plan-feature-icon">
                                ${feature.included ? '‚úì' : '‚úó'}
                            </div>
                            <span>${feature.text}</span>
                        </div>
                    `).join('')}
                </div>
                <div class="plan-action">
                    <button class="plan-btn ${plan.buttonClass}" ${plan.buttonClass === 'current' ? 'disabled' : ''}>
                        ${plan.buttonText}
                    </button>
                </div>
            </div>
        `).join('');
    }

    renderBenefits() {
        const benefitsGrid = document.querySelector('.benefits-grid');
        if (!benefitsGrid) return;

        benefitsGrid.innerHTML = this.benefits.map((benefit, index) => `
            <div class="benefit-card fade-in-up delay-${index + 1}">
                <div class="benefit-icon">${benefit.icon}</div>
                <h3 class="benefit-title">${benefit.title}</h3>
                <p class="benefit-description">${benefit.description}</p>
            </div>
        `).join('');
    }

    renderFAQ() {
        const faqList = document.querySelector('.faq-list');
        if (!faqList) return;

        faqList.innerHTML = this.faq.map((item, index) => `
            <div class="faq-item fade-in-up delay-${index + 1}">
                <button class="faq-question">
                    ${item.question}
                </button>
                <div class="faq-answer">
                    <div class="faq-answer-content">
                        ${item.answer}
                    </div>
                </div>
            </div>
        `).join('');
    }

    renderTestimonials() {
        const testimonialsGrid = document.querySelector('.testimonials-grid');
        if (!testimonialsGrid) return;

        testimonialsGrid.innerHTML = this.testimonials.map((testimonial, index) => `
            <div class="testimonial-card fade-in-up delay-${index + 1}">
                <div class="testimonial-content">
                    <p class="testimonial-text">"${testimonial.content}"</p>
                </div>
                <div class="testimonial-author">
                    <div class="testimonial-avatar">${testimonial.avatar}</div>
                    <div class="testimonial-info">
                        <div class="testimonial-name">${testimonial.name}</div>
                        <div class="testimonial-role">${testimonial.role}</div>
                    </div>
                    <div class="testimonial-rating">
                        ${Array.from({length: 5}, (_, i) =>
                            `<span style="color: ${i < testimonial.rating ? '#FFD700' : 'var(--text-tertiary)'};">‚òÖ</span>`
                        ).join('')}
                    </div>
                </div>
            </div>
        `).join('');
    }

    selectPlan(planId) {
        const plan = this.plans.find(p => p.id === planId);
        if (!plan) return;

        // Ê£ÄÊü•ÊòØÂê¶ÊòØÂΩìÂâçÂ•óÈ§ê
        if (plan.buttonClass === 'current') {
            ToastManager.info('ËøôÊòØÊÇ®ÂΩìÂâçÁöÑÂ•óÈ§ê');
            return;
        }

        // Ê£ÄÊü•ÊòØÂê¶ÂÖçË¥πÂ•óÈ§ê
        if (plan.price === 0) {
            ToastManager.success('ÊÇ®Ê≠£Âú®‰ΩøÁî®ÂÖçË¥πÂ•óÈ§ê');
            return;
        }

        this.selectedPlan = plan;
        this.openPaymentModal();
    }

    initPaymentModal() {
        // ÂàõÂª∫ÊîØ‰ªòÊ®°ÊÄÅÊ°Ü
        const modalHTML = `
            <div class="payment-modal" id="paymentModal">
                <div class="payment-modal-content">
                    <button class="payment-modal-close">‚úï</button>
                    <div class="payment-modal-header">
                        <h2 class="payment-modal-title">Á°ÆËÆ§ËÆ¢ÈòÖ</h2>
                        <p class="payment-modal-subtitle">
                            ${this.selectedPlan ?
                                `${this.selectedPlan.name} - ¬•${this.selectedPlan.price}/${this.selectedPlan.period}` :
                                'ÈÄâÊã©ÊÇ®Ë¶ÅËÆ¢ÈòÖÁöÑÂ•óÈ§ê'
                            }
                        </p>
                    </div>
                    <div class="payment-methods">
                        <div class="payment-method" data-method="alipay">
                            <div class="payment-method-icon">üí≥</div>
                            <div class="payment-method-info">
                                <div class="payment-method-name">ÊîØ‰ªòÂÆù</div>
                                <div class="payment-method-description">‰ΩøÁî®ÊîØ‰ªòÂÆùÂÆâÂÖ®ÊîØ‰ªò</div>
                            </div>
                            <div class="payment-method-radio"></div>
                        </div>
                        <div class="payment-method" data-method="wechat">
                            <div class="payment-method-icon">üíö</div>
                            <div class="payment-method-info">
                                <div class="payment-method-name">ÂæÆ‰ø°ÊîØ‰ªò</div>
                                <div class="payment-method-description">‰ΩøÁî®ÂæÆ‰ø°ÂÆâÂÖ®ÊîØ‰ªò</div>
                            </div>
                            <div class="payment-method-radio"></div>
                        </div>
                        <div class="payment-method" data-method="card">
                            <div class="payment-method-icon">üí≥</div>
                            <div class="payment-method-info">
                                <div class="payment-method-name">Èì∂Ë°åÂç°</div>
                                <div class="payment-method-description">ÊîØÊåÅÊâÄÊúâ‰∏ªÊµÅÈì∂Ë°åÂç°</div>
                            </div>
                            <div class="payment-method-radio"></div>
                        </div>
                    </div>
                    <div class="security-note">
                        üîí ÊîØ‰ªòÂÆâÂÖ®Áî±Á¨¨‰∏âÊñπÂπ≥Âè∞‰øùÈöúÔºåÊàë‰ª¨‰∏ç‰ºöÂ≠òÂÇ®ÊÇ®ÁöÑÊîØ‰ªò‰ø°ÊÅØ
                    </div>
                    <div class="payment-modal-actions">
                        <button class="btn btn-secondary" onclick="membershipCenter.closePaymentModal()">ÂèñÊ∂à</button>
                        <button class="btn btn-primary confirm-payment-btn">Á°ÆËÆ§ÊîØ‰ªò ¬•${this.selectedPlan ? this.selectedPlan.price : 0}</button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', modalHTML);
        this.paymentModal = document.getElementById('paymentModal');
    }

    openPaymentModal() {
        if (!this.paymentModal) {
            this.initPaymentModal();
        }
        this.paymentModal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    closePaymentModal() {
        if (this.paymentModal) {
            this.paymentModal.classList.remove('active');
            document.body.style.overflow = '';
        }
    }

    selectPaymentMethod(methodElement) {
        document.querySelectorAll('.payment-method').forEach(method => {
            method.classList.remove('selected');
        });
        methodElement.classList.add('selected');
    }

    confirmPayment() {
        const selectedMethod = document.querySelector('.payment-method.selected');
        if (!selectedMethod) {
            ToastManager.warning('ËØ∑ÈÄâÊã©ÊîØ‰ªòÊñπÂºè');
            return;
        }

        const method = selectedMethod.dataset.method;
        const plan = this.selectedPlan;

        if (!plan) {
            ToastManager.error('ËØ∑ÈÄâÊã©ËÆ¢ÈòÖÂ•óÈ§ê');
            return;
        }

        // Ê®°ÊãüÊîØ‰ªòËøáÁ®ã
        ToastManager.info('Ê≠£Âú®Ë∑≥ËΩ¨Âà∞ÊîØ‰ªòÈ°µÈù¢...');

        setTimeout(() => {
            this.processPayment(method, plan);
        }, 1500);
    }

    processPayment(method, plan) {
        // Ê®°ÊãüÊîØ‰ªòÊàêÂäü
        ToastManager.success('ÊîØ‰ªòÊàêÂäüÔºÅÊ≠£Âú®‰∏∫ÊÇ®ÂºÄÈÄö‰ºöÂëò...');

        setTimeout(() => {
            this.activateMembership(plan);
        }, 2000);
    }

    activateMembership(plan) {
        // Êõ¥Êñ∞Áî®Êà∑‰ºöÂëòÁä∂ÊÄÅ
        if (window.UserManager && window.UserManager.currentUser) {
            window.UserManager.currentUser.isPremium = true;
            window.UserManager.currentUser.membershipType = plan.id;
            window.UserManager.currentUser.membershipExpiry = this.calculateExpiryDate(plan.period);

            // ‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÇ®
            Utils.storage.set('currentUser', window.UserManager.currentUser);
        }

        this.closePaymentModal();
        ToastManager.success('üéâ ÊÅ≠ÂñúÊÇ®Êàê‰∏∫È´òÁ∫ß‰ºöÂëòÔºÅ');

        // Ë∑≥ËΩ¨Âà∞Áî®Êà∑‰∏≠ÂøÉ
        setTimeout(() => {
            window.location.href = 'user.html';
        }, 2000);
    }

    calculateExpiryDate(period) {
        const now = new Date();
        let expiry;

        switch (period) {
            case 'ÊØèÊúà':
                expiry = new Date(now.setMonth(now.getMonth() + 1));
                break;
            case 'ÊØèÂπ¥':
                expiry = new Date(now.setFullYear(now.getFullYear() + 1));
                break;
            default:
                expiry = new Date(now.setMonth(now.getMonth() + 1));
        }

        return expiry.toISOString();
    }

    toggleFAQ(faqItem) {
        const isActive = faqItem.classList.contains('active');

        // ÂÖ≥Èó≠ÊâÄÊúâÂÖ∂‰ªñFAQÈ°π
        document.querySelectorAll('.faq-item').forEach(item => {
            item.classList.remove('active');
        });

        // Â¶ÇÊûúÂΩìÂâçÈ°πÊú™ÊøÄÊ¥ªÔºåÂàôÊøÄÊ¥ªÂÆÉ
        if (!isActive) {
            faqItem.classList.add('active');
        }
    }

    checkUserStatus() {
        if (window.UserManager && window.UserManager.currentUser) {
            const user = window.UserManager.currentUser;

            // Â¶ÇÊûúÁî®Êà∑Â∑≤ÁªèÊòØ‰ºöÂëòÔºåÊõ¥Êñ∞Â•óÈ§êÊòæÁ§∫
            if (user.isPremium) {
                this.updatePlansForCurrentUser(user.membershipType);
            }
        }
    }

    updatePlansForCurrentUser(membershipType) {
        const plans = document.querySelectorAll('.plan-card');
        plans.forEach(plan => {
            const planId = plan.dataset.plan;
            const button = plan.querySelector('.plan-btn');

            if (planId === membershipType) {
                button.textContent = 'ÂΩìÂâçÂ•óÈ§ê';
                button.className = 'plan-btn current';
                button.disabled = true;
            } else if (planId !== 'basic') {
                button.textContent = 'ÂçáÁ∫ßÂ•óÈ§ê';
                button.className = 'plan-btn secondary';
            }
        });
    }

    initCountdown() {
        // Ê®°ÊãüÈôêÊó∂‰ºòÊÉ†ÂÄíËÆ°Êó∂
        const countdownElements = document.querySelectorAll('.countdown-number');
        if (countdownElements.length === 0) return;

        // ËÆæÁΩÆÁªìÊùüÊó∂Èó¥Ôºà7Â§©ÂêéÔºâ
        const endTime = new Date().getTime() + (7 * 24 * 60 * 60 * 1000);

        const updateCountdown = () => {
            const now = new Date().getTime();
            const distance = endTime - now;

            if (distance < 0) {
                countdownElements.forEach(el => el.textContent = '00');
                return;
            }

            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);

            if (countdownElements[0]) countdownElements[0].textContent = String(days).padStart(2, '0');
            if (countdownElements[1]) countdownElements[1].textContent = String(hours).padStart(2, '0');
            if (countdownElements[2]) countdownElements[2].textContent = String(minutes).padStart(2, '0');
            if (countdownElements[3]) countdownElements[3].textContent = String(seconds).padStart(2, '0');
        };

        updateCountdown();
        setInterval(updateCountdown, 1000);
    }
}

// È°µÈù¢ÂàùÂßãÂåñÂáΩÊï∞
function MembershipPageInit() {
    // Ê£ÄÊü•ÊòØÂê¶Âú®‰ºöÂëò‰∏≠ÂøÉÈ°µÈù¢
    if (!document.body.classList.contains('membership-page')) return;

    // ÂàõÂª∫‰ºöÂëò‰∏≠ÂøÉÂÆû‰æã
    window.membershipCenter = new MembershipCenter();

    // ‰ºöÂëò‰∏≠ÂøÉÁâπÂÆöÁöÑÂàùÂßãÂåñ
    console.log('‰ºöÂëò‰∏≠ÂøÉÂàùÂßãÂåñÂÆåÊàê');

    // ÁªëÂÆöÈ°µÈù¢ÂèØËßÅÊÄß‰∫ã‰ª∂
    EventBus.on('page:visible', () => {
        // È°µÈù¢ÈáçÊñ∞ÂèØËßÅÊó∂Ê£ÄÊü•Áî®Êà∑Áä∂ÊÄÅ
        if (window.membershipCenter) {
            window.membershipCenter.checkUserStatus();
        }
    });

    // ÁõëÂê¨Áî®Êà∑ÁôªÂΩïÁä∂ÊÄÅÂèòÂåñ
    EventBus.on('user:login', () => {
        // Áî®Êà∑ÁôªÂΩïÂêéÊõ¥Êñ∞Â•óÈ§êÊòæÁ§∫
        if (window.membershipCenter) {
            window.membershipCenter.checkUserStatus();
        }
    });

    EventBus.on('user:logout', () => {
        // Áî®Êà∑ÁôªÂá∫ÂêéÈáçÁΩÆÂ•óÈ§êÊòæÁ§∫
        if (window.membershipCenter) {
            location.reload(); // ÁÆÄÂçïÈáçÊñ∞Âä†ËΩΩÈ°µÈù¢
        }
    });
}

// È°µÈù¢SEO‰ºòÂåñ
function optimizeMembershipPageSEO() {
    // Âä®ÊÄÅËÆæÁΩÆÈ°µÈù¢Ê†áÈ¢ò
    document.title = '‰ºöÂëò‰∏≠ÂøÉ - AIÁü•ËØÜÂπ≥Âè∞';

    // ËÆæÁΩÆÈ°µÈù¢ÊèèËø∞
    const description = document.querySelector('meta[name="description"]');
    if (description) {
        description.content = 'AIÁü•ËØÜÂπ≥Âè∞‰ºöÂëò‰∏≠ÂøÉ - Ëß£ÈîÅÊâÄÊúâ‰ªòË¥πÂÜÖÂÆπÔºå‰∫´Âèó‰∏ìÂÆ∂ÊåáÂØºÔºåÂÆöÂà∂Â≠¶‰π†Ë∑ØÂæÑÔºåÊàê‰∏∫AIÈ¢ÜÂüü‰∏ì‰∏ö‰∫∫Â£´';
    }

    // ËÆæÁΩÆÂÖ≥ÈîÆËØç
    const keywords = document.querySelector('meta[name="keywords"]');
    if (keywords) {
        keywords.content = '‰ºöÂëò‰∏≠ÂøÉ,AI‰ºöÂëò,‰ªòË¥πÂÜÖÂÆπ,‰∏ìÂÆ∂ÊåáÂØº,Â≠¶‰π†Ë∑ØÂæÑ,AIËØæÁ®ã';
    }
}

// ÊÄßËÉΩÁõëÊéß
function trackMembershipPagePerformance() {
    // ÁõëÊéßÈ°µÈù¢Âä†ËΩΩÊÄßËÉΩ
    window.addEventListener('load', () => {
        const perfData = performance.getEntriesByType('navigation')[0];
        const loadTime = perfData.loadEventEnd - perfData.navigationStart;

        // Â¶ÇÊûúÊúâÂàÜÊûêÊúçÂä°ÔºåÂèØ‰ª•ÂèëÈÄÅÊï∞ÊçÆ
        if (window.gtag) {
            window.gtag('event', 'page_load_time', {
                custom_parameter: loadTime
            });
        }

        console.log(`‰ºöÂëò‰∏≠ÂøÉÈ°µÈù¢Âä†ËΩΩÊó∂Èó¥: ${loadTime}ms`);
    });

    // ÁõëÊéßÂ•óÈ§êÁÇπÂáª
    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('plan-btn')) {
            const planId = e.target.closest('.plan-card').dataset.plan;

            if (window.gtag) {
                window.gtag('event', 'plan_select', {
                    custom_parameter: planId
                });
            }
        }
    });
}

// ÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', () => {
    optimizeMembershipPageSEO();
    trackMembershipPagePerformance();
});

// ÂØºÂá∫‰æõÂÖ®Â±Ä‰ΩøÁî®
window.MembershipPageInit = MembershipPageInit;